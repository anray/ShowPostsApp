package com.softteq.testappsoftteq.data.storage.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MUserId = new Property(1, int.class, "mUserId", false, "M_USER_ID");
        public final static Property MFullName = new Property(2, String.class, "mFullName", false, "M_FULL_NAME");
        public final static Property MNickName = new Property(3, String.class, "mNickName", false, "M_NICK_NAME");
        public final static Property MEmail = new Property(4, String.class, "mEmail", false, "M_EMAIL");
        public final static Property MWebSite = new Property(5, String.class, "mWebSite", false, "M_WEB_SITE");
        public final static Property MPhone = new Property(6, String.class, "mPhone", false, "M_PHONE");
        public final static Property MCity = new Property(7, String.class, "mCity", false, "M_CITY");
        public final static Property MLatitude = new Property(8, String.class, "mLatitude", false, "M_LATITUDE");
        public final static Property MLongitude = new Property(9, String.class, "mLongitude", false, "M_LONGITUDE");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: mUserId
                "\"M_FULL_NAME\" TEXT," + // 2: mFullName
                "\"M_NICK_NAME\" TEXT," + // 3: mNickName
                "\"M_EMAIL\" TEXT," + // 4: mEmail
                "\"M_WEB_SITE\" TEXT," + // 5: mWebSite
                "\"M_PHONE\" TEXT," + // 6: mPhone
                "\"M_CITY\" TEXT," + // 7: mCity
                "\"M_LATITUDE\" TEXT," + // 8: mLatitude
                "\"M_LONGITUDE\" TEXT);"); // 9: mLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMUserId());
 
        String mFullName = entity.getMFullName();
        if (mFullName != null) {
            stmt.bindString(3, mFullName);
        }
 
        String mNickName = entity.getMNickName();
        if (mNickName != null) {
            stmt.bindString(4, mNickName);
        }
 
        String mEmail = entity.getMEmail();
        if (mEmail != null) {
            stmt.bindString(5, mEmail);
        }
 
        String mWebSite = entity.getMWebSite();
        if (mWebSite != null) {
            stmt.bindString(6, mWebSite);
        }
 
        String mPhone = entity.getMPhone();
        if (mPhone != null) {
            stmt.bindString(7, mPhone);
        }
 
        String mCity = entity.getMCity();
        if (mCity != null) {
            stmt.bindString(8, mCity);
        }
 
        String mLatitude = entity.getMLatitude();
        if (mLatitude != null) {
            stmt.bindString(9, mLatitude);
        }
 
        String mLongitude = entity.getMLongitude();
        if (mLongitude != null) {
            stmt.bindString(10, mLongitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMUserId());
 
        String mFullName = entity.getMFullName();
        if (mFullName != null) {
            stmt.bindString(3, mFullName);
        }
 
        String mNickName = entity.getMNickName();
        if (mNickName != null) {
            stmt.bindString(4, mNickName);
        }
 
        String mEmail = entity.getMEmail();
        if (mEmail != null) {
            stmt.bindString(5, mEmail);
        }
 
        String mWebSite = entity.getMWebSite();
        if (mWebSite != null) {
            stmt.bindString(6, mWebSite);
        }
 
        String mPhone = entity.getMPhone();
        if (mPhone != null) {
            stmt.bindString(7, mPhone);
        }
 
        String mCity = entity.getMCity();
        if (mCity != null) {
            stmt.bindString(8, mCity);
        }
 
        String mLatitude = entity.getMLatitude();
        if (mLatitude != null) {
            stmt.bindString(9, mLatitude);
        }
 
        String mLongitude = entity.getMLongitude();
        if (mLongitude != null) {
            stmt.bindString(10, mLongitude);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mFullName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mNickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mEmail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mWebSite
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mCity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mLatitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // mLongitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMUserId(cursor.getInt(offset + 1));
        entity.setMFullName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMWebSite(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMLatitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMLongitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
